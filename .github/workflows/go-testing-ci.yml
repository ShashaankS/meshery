name: Golang Unit and Integration Tests
on:
  push:
    branches:
      - "master"
    paths:
      - "**.go"
      - "**.golden"
  pull_request:
    branches:
      - "master"
    paths:
      - "**.go"
      - "**.golden"
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"

jobs:
  golangci:
    strategy:
      matrix:
        go: [1.24]
        os: [ubuntu-24.04]
    name: golangci-lint
    if: github.repository == 'meshery/meshery'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/checkout@v4
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64
          args: --config=.golangci.yml --timeout=10m
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-24.04
    needs: golangci
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Install lynx for xdg-open support
        run: sudo apt-get install lynx
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
      - name: Run coverage
        run: go test --short ./... -race -coverprofile=coverage.txt -covermode=atomic
      - name: Upload coverage to Codecov
        if: github.repository == 'meshery/meshery'
        uses: codecov/codecov-action@v4.3.0
        with:
          files: ./coverage.txt
          flags: unittests
  integration-tests:
    name: Integration tests
    runs-on: ubuntu-24.04
    needs: golangci
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Install lynx for xdg-open support
        run: sudo apt-get install lynx
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: "kind-cluster"
      - name: Run coverage
        run: |
          cd mesheryctl;
          make; 
          ./mesheryctl system start -p docker;
          ./mesheryctl system update -y;
          ./mesheryctl system status -y;
          ./mesheryctl system restart -y;
          ./mesheryctl system check --preflight;  
          ./mesheryctl system stop -y;
          echo "Running Mesheryctl with Docker completed."
        
          ./mesheryctl system start -p kubernetes;
          ./mesheryctl system update -y;
          ./mesheryctl system status -y;
          ./mesheryctl system restart -y;
          ./mesheryctl system check --preflight;
          ./mesheryctl system stop -y;
          echo "Running Mesheryctl with Kubernetes completed."
          
      - name: Upload coverage to Codecov
        if: github.repository == 'meshery/meshery'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.txt
          flags: gointegrationtests
  e2e-bats-tests:
    name: e2e BATS Test
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        go: ['1.24']
        k8s_version: ['v1.31.4', 'v1.32.0']
        platform: ['kubernetes']
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3.9.0
      - name: Setup BATS and BATS libs
        id: setup-bats
        uses: bats-core/bats-action@3.0.0
      - uses: actions/setup-go@v5.3.0
        with:
          go-version: ${{ matrix.go }}
      - run: |
          mkdir -p $HOME/.kube
          mkdir -p $HOME/.minikube
          sudo chown -R $USER $HOME/.kube
          sudo chown -R $USER $HOME/.minikube
      - name: Setup Kubernetes
        uses: manusa/actions-setup-minikube@v2.13.0
        with:
          minikube version: 'v1.33.0'
          kubernetes version: ${{ matrix.k8s_version }}
          driver: docker
      - name: Run minikube tunnel
        run: |
          echo 'Running minikube tunnel'
          minikube tunnel &> /dev/null &
        shell: bash
      - name: Get Date
        id: date
        run: echo "date=date +'%Y-%m-%d-%H.%M.%S'" >> $GITHUB_OUTPUT
      - name: Run mesheryctl end2end tests
        run: |
          bash run_tests.bash
        shell: bash
        working-directory: ./mesheryctl/tests/e2e
        env:
          MESHERY_PROVIDER_TOKEN: ${{ secrets.PROVIDER_TOKEN }}
          MESHERY_PLATFORM: ${{ matrix.platform }}
          BATS_LIB_PATH: ${{ steps.setup-bats.outputs.lib-path }}
          E2E_HELPERS_PATH: "${{ github.workspace }}/mesheryctl/tests/e2e/helpers"
